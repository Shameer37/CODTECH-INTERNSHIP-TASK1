import gym
import random
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import clear_output, display
from time import sleep

# Initialize environment
streets = gym.make("Taxi-v3").env

# Initialize Q-table
q_table = np.zeros([streets.observation_space.n, streets.action_space.n])

# Hyperparameters
learning_rate = 0.1
discount_factor = 0.6
exploration = 0.1
epochs = 10000

# Training the agent
for taxi_run in range(epochs):
    state = streets.reset()
    if isinstance(state, tuple):
        state = state[0]
    done = False

    while not done:
        random_value = np.random.uniform(0, 1)
        if random_value < exploration:
            action = streets.action_space.sample()  # Explore a random action
        else:
            action = np.argmax(q_table[state])  # Use the action with the highest q-value

        result = streets.step(action)
        next_state, reward, done, info = result[:4]
        if isinstance(next_state, tuple):
            next_state = next_state[0]

        prev_q = q_table[state, action]
        next_max_q = np.max(q_table[next_state])
        new_q = (1 - learning_rate) * prev_q + learning_rate * (reward + discount_factor * next_max_q)
        q_table[state, action] = new_q

        state = next_state

# Save the Q-table for future use
np.save("q_table.npy", q_table)

# Watching the agent play the game in RGB mode
for tripnum in range(1, 11):
    state = streets.reset()
    done = False
    trip_length = 0

    while not done and trip_length < 25:
        action = np.argmax(q_table[state])
        next_state, reward, done, info = streets.step(action)
        
        # Clear output and render in RGB mode
        clear_output(wait=True)
        rgb_image = streets.render(mode='rgb_array')
        
        # Display the RGB image with step annotation
        plt.imshow(rgb_image)
        plt.axis('off')  # Hide the axis
        plt.title(f"Trip number {tripnum}, Step {trip_length}")
        display(plt.gcf())
        sleep(0.5)
        
        state = next_state
        trip_length += 1

    sleep(2)
    plt.close()

streets.close()
